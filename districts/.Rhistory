library(png)
library(grid)
library(dplyr)
library(data.table)
library(rstudioapi)
#### Regions ####
# set working directory to the file path
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("regions")
# setwd("districts") # for the other example flag
files <- list.files(pattern = ".png$")
# apply the readPNG function to all the images
all_flags <- sapply(files, readPNG, simplify = FALSE) %>% bind_rows()
all_flags_summed <- Reduce("+", all_flags)
avg <- all_flags_summed / length(files)
imgmatrix <- matrix(avg, nrow = 200)
# dim(imgmatrix) # check the dimensions
# remap the matrix
r <- imgmatrix[1:200, 1:300]
g <- imgmatrix[1:200, 301:600]
b <- imgmatrix[1:200, 601:900]
# create colors based on red, green and blue values
avg_col <- rgb(r, g, b)
dim(avg_col) <- dim(r)
grid.raster(avg_col, interpolate = FALSE) # output
all_flags
head(all_flags)
all_flags_summed
View(all_flags)
library(png)
library(grid)
library(dplyr)
library(data.table)
library(rstudioapi)
#### Regions ####
# set working directory to the file path
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("districts")
# setwd("regions") # for the other example flag
files <- list.files(pattern = ".png$")
# apply the readPNG function to all the images
all_flags <- sapply(files, readPNG, simplify = FALSE) %>% bind_rows()
all_flags_summed <- Reduce("+", all_flags)
avg <- all_flags_summed / length(files)
imgmatrix <- matrix(avg, nrow = 200)
# dim(imgmatrix) # check the dimensions
# remap the matrix
r <- imgmatrix[1:200, 1:300]
g <- imgmatrix[1:200, 301:600]
b <- imgmatrix[1:200, 601:900]
# create colors based on red, green and blue values
avg_col <- rgb(r, g, b)
dim(avg_col) <- dim(r)
grid.raster(avg_col, interpolate = FALSE) # output
type(all_flags)
typeof(all_flags)
dim(all_flags)
all_flags[1]
all_flags[[1]]
all_flags[[2]]
View(all_flags)
all_flags[[, 1]]
all_flags[[,1]]
all_flags[,11]
all_flags[[1]]
length(all_flags)
all_flags[[72]]
all_flags[[73]]
nrow(all_flags)
#### Median ####
median_flag <- c(rep(NA, nrow(all_flags)))
median_flag
ncol(all_flags)
ncol(all_flags)
nrow(flags)
nrow(all_flags)
median_flag[1]
#### Median ####
# Prepare an empty vector
median_flag <- c(rep(NA, nrow(all_flags)))
# Calculate the median for every "row" and write it into the vector
for (icol in 1:nrow(all_flags)){
temp_vec <- c(rep(NA, ncol(all_flags)))
for (icol in 1:ncol(all_flags)){
temp_vec[icol] <- all_flags[[icol]][icol]
}
median_flag[icol] <- median(temp_vec)
}
median_flag
# Calculate the median for every "row" and write it into the vector
for (jrow in 1:nrow(all_flags)){
temp_vec <- c(rep(NA, ncol(all_flags)))
for (icol in 1:ncol(all_flags)){
temp_vec[icol] <- all_flags[[icol]][jrow]
}
median_flag[jrow] <- median(temp_vec)
}
median_flag[jrow]
median_flag
# Calculate the median for every "row" and write it into the vector
for (jrow in 1:nrow(all_flags)){
temp_vec <- c(rep(NA, ncol(all_flags)))
for (icol in 1:ncol(all_flags)){
temp_vec[icol] <- all_flags[[icol]][jrow]
}
imgmedian[jrow] <- median(temp_vec)
}
#### Median ####
# Prepare an empty vector
imgmedian <- c(rep(NA, nrow(all_flags)))
# Calculate the median for every "row" and write it into the vector
for (jrow in 1:nrow(all_flags)){
temp_vec <- c(rep(NA, ncol(all_flags)))
for (icol in 1:ncol(all_flags)){
temp_vec[icol] <- all_flags[[icol]][jrow]
}
imgmedian[jrow] <- median(temp_vec)
}
imgmedian
View(all_flags)
all_flags[[1]]
typeof(all_flags[[1]])
all_flags[[1]][2]
all_flags[[1]][,295]
all_flags[[1]][1,295]
all_flags[[1]][1]
all_flags[[1]][2]
all_flags[[1]][300]
all_flags[[1]][600]
all_flags[[1]][300]
nrow(all_flags[[1]])
ncol(all_flags[[1]])
dim(all_flags[[1]])
all_flags[[1]]
as.col(all_flags[[1]])
all_flags[[1]]
as.data.frame(all_flags[[1]])
all_flags[[1]]
all_flags[[1, 295]]
all_flags[[1]]
all_flags_summed
?Reduce
Reduce(median, all_flags)
Reduce(sum, all_flags)
Reduce("+", all_flags)
Reduce("-", all_flags)
Reduce(median, all_flags, accumulate = T)
typeof(Reduce(median, all_flags, accumulate = T))
typeof(all_flags_summed)
imgavg[1:200, 1:300]
library(png)
library(grid)
library(dplyr)
library(data.table)
library(rstudioapi)
#### Regions ####
# set working directory to the file path
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("districts")
# setwd("regions") # for the other example flag
files <- list.files(pattern = ".png$")
all_flags <- sapply(files, readPNG, simplify = FALSE) %>% bind_rows()
#### Average ####
all_flags_summed <- Reduce("+", all_flags)
avg <- all_flags_summed / length(files)
imgavg <- matrix(avg, nrow = 200)
# dim(imgavg) # check the dimensions
#### Median ####
# Prepare an empty vector
imgmedian <- c(rep(NA, nrow(all_flags)))
# Calculate the median for every "row" and write it into the vector
for (jrow in 1:nrow(all_flags)){
temp_vec <- c(rep(NA, ncol(all_flags)))
for (icol in 1:ncol(all_flags)){
temp_vec[icol] <- all_flags[[icol]][jrow]
}
imgmedian[jrow] <- median(temp_vec)
}
# Remap the matrix
r_avg <- imgavg[1:200, 1:300]
g_avg <- imgavg[1:200, 301:600]
b_avg <- imgavg[1:200, 601:900]
# Create colors based on red, green and blue values
avg_col <- rgb(r, g, b)
dim(avg_col) <- dim(r)
# Output
grid.raster(avg_col, interpolate = FALSE)
imgavg[1:200, 1:300]
imgavg[1:200, 301:600]
imgavg[1:200, 1:300]
imgavg[1:200, 301:600]
imgavg[1,1]
typeof(imgavg)
class(imgavg)
?rgb
nrow(all_flags)
View(all_flags)
View(all_flags)
all_flags[[1]][1]
all_flags[1][1]
all_flags[1]
class(all_flags[1])
class(all_flags[2])
all_flags[2]
all_flags[60]
all_flags[72]
all_flags[73]
all_flags[72][1]
all_flags[72][200]
all_flags[[72]]
all_flags[[72]][1,]
all_flags[[72]][1]
median(all_flags[[72]])
all_flags[[72]]
class(all_flags[[72]])
class(all_flags[[72, 1, 1]])
all_flags[[72, 1, 1]]
all_flags[[72, 1,]]
all_flags[[72, 1]]
all_flags[[72, 2]]
all_flags[[72, 3]]
all_flags[[72, 4]]
all_flags[[72, 5]]
all_flags[[72, 6]]
all_flags[[72, 300]]
all_flags[[72, 20]]
all_flags[[72, 60]]
all_flags[[72, 72]]
all_flags[[72, 200]]
all_flags[[72,]]
all_flags[[72]]
dim(all_flags[[72]])
all_flags[[72]][1,1,1]
all_flags[[72]][1,1,4]
all_flags[[72]][1,1,5]
all_flags[[72]][1, 1]
all_flags[[72]][1, 1, 1]
all_flags[[72]][200, 1, 1]
all_flags[[72]][150, 1, 1]
all_flags[[72]][1, 1, 1]
#### Median ####
# Prepare an empty vector
imgmedian <- array(NA, dim = dim(all_flags[[1]]))
dim(imgmedian)
dim(imgmedian)[1]
1:dim(imgmedian)[3]
ncol(all_flags)
#### Median ####
# Prepare an empty vector
imgmedian <- array(NA, dim = dim(all_flags[[1]]))
for (height in 1:dim(imgmedian)[1]){
for (width in 1:dim(imgmedian)[2]){
for (color in 1:dim(imgmedian)[3]){
temp_vec <- c(rep(NA, ncol(all_flags)))
for (vars in 1:ncol(all_flags)){
temp_vec[vars] <- all_flags[[vars]][height, width, col]
}
imgmedian[[vars]][height, width, col] <- median(temp_vec)
}
}
}
for (vars in 1:ncol(all_flags)){
temp_vec[vars] <- all_flags[[vars]][height, width, col]
}
for (vars in 1:ncol(all_flags)){
temp_vec[vars] <- all_flags[[vars]][height, width, col]
}
for (hgt in 1:dim(imgmedian)[1]){
for (wth in 1:dim(imgmedian)[2]){
for (clr in 1:dim(imgmedian)[3]){
temp_vec <- c(rep(NA, ncol(all_flags)))
for (vars in 1:ncol(all_flags)){
temp_vec[vars] <- all_flags[[vars]][hgt, wth, clr]
}
imgmedian[[vars]][hgt, wth, clr] <- median(temp_vec)
}
}
}
for (hgt in 1:dim(imgmedian)[1]){
for (wth in 1:dim(imgmedian)[2]){
for (clr in 1:dim(imgmedian)[3]){
temp_vec <- c(rep(NA, ncol(all_flags)))
for (vars in 1:ncol(all_flags)){
temp_vec[vars] <- all_flags[[vars]][hgt, wth, clr]
}
imgmedian[hgt, wth, clr] <- median(temp_vec)
}
}
}
imgmedian
r_avg <- imgavg[1:200, 1:300]
r_med <- imgmedian[1:200, 1:300]
g_avg <- imgavg[1:200, 301:600]
g_med <- imgmedian[1:200, 301:600]
b_avg <- imgavg[1:200, 601:900]
b_med <- imgmedian[1:200, 601:900]
imgmedian[1:200, 1:300]
head(imgmedian)
imgmedian <- matrix(imgmedian, nrow = 200)
r_med <- imgmedian[1:200, 1:300]
r_avg <- imgavg[1:200, 1:300]
r_med <- imgmedian[1:200, 1:300]
g_avg <- imgavg[1:200, 301:600]
g_med <- imgmedian[1:200, 301:600]
b_avg <- imgavg[1:200, 601:900]
b_med <- imgmedian[1:200, 601:900]
avg_col <- rgb(r_avg, g_avg, b_avg)
med_col <- rgb(r_med, g_med, b_med)
imgmedian
avg
imgavg
#### Median ####
# Prepare an empty vector
median_arr <- array(NA, dim = dim(all_flags[[1]]))
for (hgt in 1:dim(imgmedian)[1]){
for (wth in 1:dim(imgmedian)[2]){
for (clr in 1:dim(imgmedian)[3]){
temp_vec <- c(rep(NA, ncol(all_flags)))
for (vars in 1:ncol(all_flags)){
temp_vec[vars] <- all_flags[[vars]][hgt, wth, clr]
}
median_arr[hgt, wth, clr] <- median(temp_vec)
}
}
}
for (hgt in 1:dim(median_arr)[1]){
for (wth in 1:dim(median_arr)[2]){
for (clr in 1:dim(median_arr)[3]){
temp_vec <- c(rep(NA, ncol(all_flags)))
for (vars in 1:ncol(all_flags)){
temp_vec[vars] <- all_flags[[vars]][hgt, wth, clr]
}
median_arr[hgt, wth, clr] <- median(temp_vec)
}
}
}
imgmedian <- matrix(median_arr, nrow = 200)
r_med <- imgmedian[1:200, 1:300]
g_med <- imgmedian[1:200, 301:600]
b_med <- imgmedian[1:200, 601:900]
med_col <- rgb(r_med, g_med, b_med)
dim(med_col) <- dim(r_med)
grid.raster(med_col, interpolate = FALSE)
grid.raster(med_col, interpolate = FALSE)
med_col <- rgb(r_med, g_med, b_med)
#### Median ####
# Prepare an empty vector
median_arr <- array(NA, dim = dim(all_flags[[1]]))
for (hgt in 1:dim(median_arr)[1]){
for (wth in 1:dim(median_arr)[2]){
for (clr in 1:dim(median_arr)[3]){
temp_vec <- c(rep(NA, ncol(all_flags)))
for (vars in 1:ncol(all_flags)){
temp_vec[vars] <- all_flags[[vars]][hgt, wth, clr]
}
median_arr[hgt, wth, clr] <- median(temp_vec)
}
}
}
imgmedian <- matrix(median_arr, nrow = 200)
r_med <- imgmedian[1:200, 1:300]
g_avg <- imgavg[1:200, 301:600]
g_med <- imgmedian[1:200, 301:600]
b_avg <- imgavg[1:200, 601:900]
b_med <- imgmedian[1:200, 601:900]
med_col <- rgb(r_med, g_med, b_med)
# Remap the matrix
r_avg <- imgavg[1:200, 1:300]
# Create colors based on red, green and blue values
avg_col <- rgb(r_avg, g_avg, b_avg)
imgmedian[1:200, 601:900]
med_col <- rgb(r_med, g_med, b_med)
max(imgmedian[1:200, 601:900])
max(imgmedian[1:200, 301:600])
sum(is.na(imgmedian[1:200, 1:300]))
imgmedian[1:200, 1:300]
imgmedian <- na.omit(matrix(median_arr, nrow = 200))
r_med <- imgmedian[1:200, 1:300]
imgmedian <- matrix(median_arr, nrow = 200)
#### Median ####
# Prepare an empty vector
median_arr <- array(1, dim = dim(all_flags[[1]]))
for (hgt in 1:dim(median_arr)[1]){
for (wth in 1:dim(median_arr)[2]){
for (clr in 1:dim(median_arr)[3]){
temp_vec <- c(rep(NA, ncol(all_flags)))
for (vars in 1:ncol(all_flags)){
temp_vec[vars] <- all_flags[[vars]][hgt, wth, clr]
}
median_arr[hgt, wth, clr] <- median(temp_vec)
}
}
}
imgmedian <- matrix(median_arr, nrow = 200)
r_med <- imgmedian[1:200, 1:300]
r_med <- imgmedian[1:200, 1:300]
g_avg <- imgavg[1:200, 301:600]
g_med <- imgmedian[1:200, 301:600]
b_avg <- imgavg[1:200, 601:900]
b_med <- imgmedian[1:200, 601:900]
med_col <- rgb(r_med, g_med, b_med)
# Remap the matrix
r_avg <- imgavg[1:200, 1:300]
sum(is.na(imgmedian[1:200, 1:300]))
sum(is.na(imgavg[1:200, 1:300]))
r_avg <- imgavg[1:200, 1:300]
r_med <- imgmedian[1:200, 1:300]
g_avg <- imgavg[1:200, 301:600]
g_med <- imgmedian[1:200, 301:600]
b_avg <- imgavg[1:200, 601:900]
b_med <- imgmedian[1:200, 601:900]
# Create colors based on red, green and blue values
avg_col <- rgb(r_avg, g_avg, b_avg)
med_col <- rgb(r_med, g_med, b_med)
dim(avg_col) <- dim(r_avg)
dim(med_col) <- dim(r_med)
# Output
grid.raster(avg_col, interpolate = FALSE)
grid.raster(med_col, interpolate = FALSE)
grid.raster(med_col, interpolate = FALSE)
dim(med_col) <- dim(r_med)
grid.raster(med_col, interpolate = FALSE)
med_col <- rgb(r_med, g_med, b_med)
dim(avg_col) <- dim(r_avg)
dim(med_col) <- dim(r_med)
# Output
grid.raster(avg_col, interpolate = FALSE)
grid.raster(med_col, interpolate = FALSE)
# Output
grid.raster(avg_col, interpolate = FALSE)
grid.raster(med_col, interpolate = FALSE)
#### Median ####
# Prepare an empty vector
median_arr <- array(0, dim = dim(all_flags[[1]]))
for (hgt in 1:dim(median_arr)[1]){
for (wth in 1:dim(median_arr)[2]){
for (clr in 1:dim(median_arr)[3]){
temp_vec <- c(rep(NA, ncol(all_flags)))
for (vars in 1:ncol(all_flags)){
temp_vec[vars] <- all_flags[[vars]][hgt, wth, clr]
}
median_arr[hgt, wth, clr] <- median(temp_vec)
}
}
}
imgmedian <- matrix(median_arr, nrow = 200)
r_med <- imgmedian[1:200, 1:300]
g_avg <- imgavg[1:200, 301:600]
g_med <- imgmedian[1:200, 301:600]
b_avg <- imgavg[1:200, 601:900]
b_med <- imgmedian[1:200, 601:900]
# Remap the matrix
r_avg <- imgavg[1:200, 1:300]
#### Median ####
# Prepare an empty vector
median_arr <- array(0, dim = dim(all_flags[[1]]))
for (hgt in 1:dim(median_arr)[1]){
for (wth in 1:dim(median_arr)[2]){
for (clr in 1:dim(median_arr)[3]){
temp_vec <- c(rep(NA, ncol(all_flags)))
for (vars in 1:ncol(all_flags)){
temp_vec[vars] <- all_flags[[vars]][hgt, wth, clr]
}
median_arr[hgt, wth, clr] <- median(temp_vec)
}
}
}
#### Median ####
# Prepare an empty vector
median_arr <- array(1, dim = dim(all_flags[[1]]))
for (hgt in 1:dim(median_arr)[1]){
for (wth in 1:dim(median_arr)[2]){
for (clr in 1:dim(median_arr)[3]){
temp_vec <- c(rep(NA, ncol(all_flags)))
for (vars in 1:ncol(all_flags)){
temp_vec[vars] <- all_flags[[vars]][hgt, wth, clr]
}
median_arr[hgt, wth, clr] <- median(temp_vec)
}
}
}
